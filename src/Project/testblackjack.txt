<?php

namespace App\Project;

use App\Project\DeckOfCards;
use App\Project\BlackJackHand;
use App\Project\BlackJackWinner;
use App\Project\BlackJackAction;


/**
 * Class BlackJack.
 *
 * Here is everything for the game, from drawing a card, to scoring a hand.
 */
class BlackJack
{
    /** @var DeckOfCards */
    protected $deck;

    /** @var BlackJackHand */
    protected $hand;

    /** @var BlackJackWinner */
    protected $winner;

    /** @var BlackJackAction */
    protected $action;

    protected $players = 0;

    protected $stand = [
                'stand0' => "Go",
                'stand1' => "Go",
                'stand2' => "Go",
            ];

    /**
     * @var array<int, array{'suit': string, 'card': string, 'graphic': string}>
    */
    protected $playerHand = [
        'player' => []
    ];

    /** @var array<int, array{'suit': string, 'card': string, 'graphic': string}> */
    protected $dealerHand = [];


    /**
     * Constructor.
     *
     * Here we get out Deck, and Classes that we use to get scores and winners.
     * @return void
     */
    public function __construct()
    {
        $this->deck = new DeckOfCards();
        $this->hand = new BlackJackHand();
        $this->winner = new BlackJackWinner();
        $this->action = new BlackJackAction();
    }


    public function getStand(): array
    {
        return $this->stand;
    }


    /**
     * Here is where we return our player hand.
     * @return array<int, array{'card': string, 'graphic': string}> */
    public function setPlayers(int $players): void
    {
        $this->players = $players;
    }


    /**
     * Here is where we return our player hand.
     * @return array<int, array{'card': string, 'graphic': string}> */
    public function setPlayerHands(): void
    {
        $players = $this->players;

        for ($i = 1; $i <= $players; $i++) {
            $this->playerHand['player'][$i] = [];
        }
    }



    /**
     * Here is where we get score for the players and dealers hand
     * With an ace and the face cards we give them a numerical value instead.
     * @param array<int, array{'card': string, 'graphic': string}> $hand
     * @return int $score. Which is the score for a hand.
     */
    public function getScore(string $player): array
    {
        if ($player != "dealer") {
            $score = [];
            foreach ($this->playerHand['player'] as $new) {
                $score['player'][] = $this->hand->getScore($new);
            }
        } else {
            $score['dealer'][] = $this->hand->getScore($this->dealerHand);
        }


        return $score;
    }

    /**
     * Here is where we draw a card to add to the hand of either the player or dealer.
     * our parameter is where we write if we are the player or dealer so we know where to add the cards
     * If we are the dealer we loop until our hand is worth atleast 17.
     * @param string $player
     * @return array<int, array{'suit': string, 'card': string, 'graphic': string}>
     */
    public function drawCard(string $player, int $amount = 0): array
    {
        $hand = [];

        $drawn = $this->deck -> drawCard(1);
        if ($player != 'dealer') {
            $this->playerHand['player'][$amount][] = $drawn[0];

            $hand =  $this->playerHand;

        } elseif ($player == 'dealer') {
            if (count($this->dealerHand) === 0) {
                $drawn2 = $this->deck -> drawCard(1);

                $this->dealerHand[] = $drawn2[0];
            } else {
                $score = $this->getScore("dealer");
                while ($score["dealer"][0] <= 17) {
                    $drawn2 = $this->deck -> drawCard(1);

                    $this->dealerHand[] = $drawn2[0];
                    $score = $this->getScore("dealer");
                }
            }


            $hand =  $this->dealerHand;

        }

        return $hand;
    }


    /**
     * Here is where we return our player hand.
     * @return array<int, array{'card': string, 'graphic': string}> */
    public function playerHand(): array
    {
        return $this->playerHand;
    }

    /**
     * Here is where we return our dealer hand.
     * @return array<int, array{'card': string, 'graphic': string}> */
    public function dealerHand(): array
    {
        return $this->dealerHand;
    }

    /**
     * Here is where we check the state of our game and see which player won.
     * @return string Here it says either "player won" or "dealer won" */
    public function gameOver(): array
    {
        $playerScore = $this->getScore("player");
        $dealerScore = $this->getScore("dealer");

        $winner = [];

        if ($playerScore) {
            foreach ($playerScore["player"] as $score) {
                $winner[] = $this->winner->gameOver($dealerScore["dealer"][0], $score);
            }
        }


        return $winner;

    }





    /**
     * I used this for the test and its where we can decide how our players hand should look.
     * @param array<int, array{'suit': string, 'card': string, 'graphic': string}> $hand
     * @return array<int, array{'card': string, 'graphic': string}> */
    public function setPlayerHand(array $hand): array
    {
        $this->playerHand = $hand;
        return $this->playerHand;
    }


    /**
     * I used this for the test and its where we can decide how our dealers hand should look.
     * @param array<int, array{'suit': string, 'card': string, 'graphic': string}> $hand
     * @return array<int, array{'card': string, 'graphic': string}> */
    public function setDealerHand(array $hand): array
    {
        $this->dealerHand = $hand;
        return $this->dealerHand;
    }



    public function playerAction(string $index): void
    {
        $stand = $this->stand;

        if ($index[0] == 'd') {
            drawcard;
        } else if ($index[0] == 's') {
            $newStand = $this->winner->action($stand, $index);
        }

        $stand = $newStand

        return $this->dealerHand;
    }


}
