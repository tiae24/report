{% extends "base.html.twig" %}

{% block title %}Magic number{% endblock %}

{% block body %}

    <div class="main-body">

    {% for routes in route %}

        <h3 class="route">{{ routes.route }}</h3>

        <h3>{{ routes.name }}</h3>

        <p>{{ routes.beskrivning }}</p>

        {% if routes.name == 'drawNumber' %}

            <button onclick="window.location.href='{{ path(routes.name, { number: 5 }) }}';">
            Go!
            </button>
        

        {% else %}

            <button onclick="window.location.href='{{ path(routes.name) }}';">
                Go!
            </button>

        {% endif %}

    {% endfor %}


    <h2> UML DIAGRAM OCH KLASSER </h2>

    <p>
        Jag har gjort och anv√§nt 3 klasser, Cards, CardGraphic och DeckOfCards, Cards √§r sj√§lvaste korten vi anv√§nder som har ett value och en suit,
        har tv√• funktioner som l√•ter oss f√• fram ett korts v√§rde och dens suit.
    </p>

    <p>
        CardGraphic √§r v√•ran klass d√§r vi g√∂r sj√§lvaste kortet vi ser p√• hemsidan, vi v√•r in ett kort och s√• kollar vi p√• dens v√§rde och suit och ger den 
        det kortet som passar beroende p√• vad kortet √§r, s√• hj√§rter ess blir kortet som ser ut som hj√§rter ess. Sen har jag getAssString s√• f√•r vi kortet som string,
        s√• vi kan anv√§nda det p√• v√•ran sida
    </p>

    <p>
        Sen har vi DeckOfCards som √§r v√•ran klass som √§rver fr√•n b√•da Cards och DeckOfCards, v√•ran DeckOfCards best√•r av en array som har Cards och CardsGraphic, vi bygger
        dem genom att loopa igenom en Lista med suitsen och med korten, och s√• l√§gger vi till dem i en array under card och cardgraphic.

    </p>

    <p>
        Sedan har vi massa funktioner som vi anv√§nder, som totalCards som kollar vad hur m√•nga kort det √§r i decket, getCards som ger oss korten fr√•n
        cardgraphic i string form, s√• vi f√•r v√•rat kort som vi anv√§nder p√• sidan som t.ex üÇ±.
    </p>

    <p>
        getSuit som ger oss suiten p√• v√•rat kort
    </p>

    <p>
        getString som ger oss kortet fr√•n card i string form, s√• vi f√•r typ [2, hearts]
    </p>

    <p>
        drawCards som drar ett antal kort fr√•n v√•rat deck och tar bort dem 
        och skickar en array p√• dem borttagna korten, s√• antalet kort man ska ta bort anv√§nds med en for loop som tar fram random nummer mellan 0 till 
        totala antalet kort i decket sen l√§gger vi till korten, suiten och cardgraphic i en array som vi sedan vissar upp p√• sidan, och sen sist i loopen tar vi bort 
        kortet fr√•n decket och sen loopas det om.
    </p>

    <img src="img/MVC.PNG" alt="Our UML DIAGRAM" width="800" height="600">

    </div>
    
{% endblock %}