{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <main class="main">

        <h1>
            Introduktion
        </h1>

        <h4>
            Codestyle
        </h4>

        <p>
            Codestyle är ju hur våran kod är skriven och formaterad, vare sig det är hur variabel namnen är skrivna t.ex med CamelCase och snake_case och indentering.
        </p>

        <p>
            Så Codestyle har ju inte direkt något med att ens kod funar att göra utan är mer för att göra ens kod mer lättläst vilket gör det lättare att veta 
            vad allting i ens kod gör och att fel söka ifall något inte funkar.

            Det finns ju inte direkt några värden som ger oss en score av hur bra ens kod är skriven, men vi kan ju använda oss utav saker som composer csfix som 
            fixar så att koden blir skriven i en bra kodstil, eller andra saker som kanske visar oss varje linje som har något "fel" vare sig det är dåliga variabel namn 
            eller att man saknar indentering.
        </p>

        <p>
            I mitt fall så brukar jag bara skriva koden så bra som möjligt direkt eftersom det blir jobbigt att behöva gå över allting när man är klar eller att 
            lita för mycket på composer csfix.
            
            Så kollar man på min kod så ser t.ex routes nästan exakt likadana ut, alltså är dem på samma "level" med indentering och är formatterad på samma sätt 
            vilket gör det lättare att hålla koll på vad alla gör och felsöka eftersom man vet när dem börjar och slutar.
        </p>

        <p>
            Även om man kollar på html koden så är den indenterad på ett speciellt sätt där om något är inom en klass så är den indenterad ett extra steg, 
            i detta fall så är ju allting inom main, då är det ett steg höger indenterat från main så det blir lättare att läsa och se vad som tillhör klassen.
        </p>

        <h4>
            Coverage
        </h4>

        <p>
            Coverage är hur mycket av koden täcks av tester vare sig det är små tester eller stora, desto bätte Coverage man har desto mer felsäker är ens kod och 
            desto mindre chans är det att något inte funkar eller att några speciella tillfällen funkar som de ska t.ex ifall man vill testa att det inte går 
            att det inte går att skriva in en sträng där man vill ha en int.
        </p>

        <p>
            Med Phpmetrics så kan vi kolla hur mycket av koden är täckt vare sig det är en linje eller en hel funktion.
            I Detta fall så har alla mina klasser 100% täckning vare sig det är linjer vi kollar på eller funktionerna, det som gör PHPMetric så bra är att 
            vi kan se exakt vad av koden som är täckt och vad som inte är, så jag viste ifall mina tester funkade eller inte och om dem täckte allt jag ville.
        </p>

        <p>
            Detta gör att min kods "basics" funkar som de ska och den har inga "små" fel, 100% betyder ju såklart inte att koden är felfri men det gör att det mesta borde 
            funka, sen kan man ju såklart göra fler tester som kollar olika scenarion.

            I detta fall så med 100% täckning så kollar jag ifall alla sätt att vinna på kollas i testerna, så ifall dealern får 21, spelaren får 21 någon för över 21 osv.

            Eftersom att jag har 100% kodtäckning så testas all kod, det betyder inte alla scenarion men någonting testas minst en gång, och över 70% anses som bra medans
            under 35% är dåligt.
        </p>

        <img src="{{ asset('img/Coverage.PNG') }}" width="100%">

        <h4>
            Complexity
        </h4>

        <p>
            Complexity är som det låter, hur komplicerad koden man har skrivit är, desto mer komplicerad ens kod är desto svårare blir det att testa 
            och så kan koden få fler problem när den körs vare sig det är mindre problem eller om det är något stort problem. Det kan även vara svårare att 
            förstå koden desto mer komplicerad den är eftersom det kan bli svårare att hålla koll på vad allting gör i din kod och hur koden hänger ihop.
        </p>

        <p>
            Vi kan ta t.ex min kod, vi ser att BlackJack klassen har en Cyclomatic Complexity som är 19 och en Maintainability Index på 69 medans 
            DeckOfCards bara har 7 i Cyclomatic Complexity och en Maintainability Index på 73.61, Desto lägre CC och högre MI desto bättre, just nu så är 
            BlackJacks CC lite för hög och MI skulle kunna vara lite högre men det är inget super stort problem medans DeckOfCards inte är så farligt och är närmare
            bra än dåligt.
            Desto mer komplex och lägre MI desto mer problem kan koden få som chans att koden buggar.
            I detta fallet så har jag bara ett score på 0.32 buggar för BlackJack klassen vilket betyder att det inte är så stor chans för några buggar i klassens kod,
            och DeckOfCards har bara 0.21 vilket är såklart ännu mindre, jag har ju många tester som kollar att allt funkar som det ska.
        </p>
        <p>
            Även så använder ju såklart BlackJack klassen DeckofCards vilket gör att ifall något är fel med 
            DeckOfCards så kan de orsaka BlackJack klassen.
            Men det är ju bättre så eftersom då behöver inte BlackJack klassen göra allting själv, så något som kunde underlätta blackjack klassen hade varit att 
            kanske ha en Hand klass som sparar kort handen och jobbar med den.
        </p>

        <img src="{{ asset('img/Complexity.PNG') }}" width="100%">

        <h4>
            Cohesion
        </h4>

        <p>
            Cohesion är hur bra klassen och det den gör i metoder håller ihop, alltså så kollar man så att ens klass inte gör för mycket olika saker som skulle 
            kunna göras i andra klasser.
            Cohesion mäts i LCOM, vilket betyder "Lack of cohesion of methods", desto högre värde man har desto lägra är ens cohesion alltså desto sämre är ens kod.

        </p>

        <p>
            Cohesion är viktig eftersom det är viktigt att nästan dela upp sin kod i delar, i vårt fall så har vi delat upp så vi har en kort klass, en Däck klass 
            och en BlackJack klass, egentligen skulle vi kunna haft allt i en och samma klass men det hade bara gjort svårare att förstå och koden hör inte ihop lika bra.
        </p>

        <p>
            Ett bra värde man vill ha på sin kod för att visa att man har bra cohesion är så nära 1 som möjligt, i mitt fall så har jag 1 för BlackJack, DeckOfCards och Cards 
            Detta är ju förståt eftersom jag har delat upp all i 3 olika klasser så alla klasser inte behöver göra lika mycket och kan istället använda sig utav varandra.
        </p>

        <img src="{{ asset('img/Cohesion.PNG') }}" width="100%">

        <h4>
            Coupling
        </h4>

        <p>
            Coupling är hur klasser hör ihop med varandra, Man räcknar det i 2 värden.
        </p>

        <p>
            Afferent coupling (AC), är värdet för hur många klasser som använder sig och påverkas av denna klassen, så ifall klass Y och Z använder sig av klassen X så får den värdet 2 EC (OUTGOING).
        </p>

        <p>
            Efferent coupling (EC) detta är för hur många klasser denna klassen använder, så ifall klass X använder sig utav Y och Z så har en ett EC (incoming) värde på 2.
        </p>

        <p>
            Som jag nämde tidigare så vill man ju såklart inte att en klass ska göra för mycket arbete, men man vill ju även inte göra så att en klass behöver använda
            sig utav för många klasser, högt EC värdet, eftersom då om något går fel på en av klasserna kan hela klassen sluta funka, det blir nästan som om man har 
            massa sladdar i en låda, tom knyter ihop sig själva och så blir det svårt att ta los dem.
        </p>

        <p>
            Man kan även ha att för många klasser använder sig utav en klass högt AC värdet, detta är dåligt eftersom man måste vara försiktig när man gör ändringar i klassen 
            eftersom det kan påverka flera olika klasser och få dem att sluta funka, vilket även gör att det blir svårare att fixa eftersom ifall man fixar ett problem 
            så kan en annan klass sluta fixa.
        </p>

        <p>
            Man vill alltså hitta en bra balans mellan att inte ha för många klasser som are relationer med varandra men även så vill man inte att en klass ska göra för mycket.
            I mitt fall så har ingen av mina klasser särskilt höga värden eftersom koden och det vi har gjort så här långt i kursen inte har vara så komplicerat och stort, 
            så mitt högsta värde är 3 AC (OUTGOING) för Cards och DeckOfCards, eftesrom BlackJack och CardsGraphic använder sig utav dem och andra klasser.
        </p>

        <p>
            Sen så har ju såklart mina controllers lite högre EC värde, i detta fall är 6 högsta eftersom jag måste använde mig utav klasserna vare sig det är för att visa 
            dem på en api sida, eller bara för att t.ex visa ett kort, en kortlek osv.
        </p>

        <img src="{{ asset('img/Coupling.PNG') }}" width="100%">

        <h4>
            CRAP
        </h4>

        <p>
            Change Risk Analyzer and Predictor (CRAP) är ett värde på hur mycket arbete det tar för att fixa dåliga metoder i ens kod.

            Räkning är baserad på hur komplex ens metoder och klasser är jämfört med hur många tester det finns för dem, så desto mer tester man har 
            desto lägre CRAP score får man.

            Så om man har bra och tillräckligt med tester så kan komplex kod fungera och ge bra CRAP scores.
        </p>

        <p>
            CRAP visar ju hur "fel säker" våran kod är, desto högre score vi hade desto sämre är den och det blir alltså svårare att fixa, men som vi nämde så 
            kan man ha en bra score även fast koden är komplex så koden man skriver kan ju vara komplex, CRAP scoren visar bara att koden kan vara komplex eller 
            saknar tester. Så en score beror ju lite på båda hur komplicerad ens kod är och om man har tester som "städar" upp efter en och checkar att allt funkar 
            som det ska.
        </p>

        <p>
            I mitt fall så är det högsta CRAP scoren jag har fått 12 för en controller som är till för att köra blackjack spelet, men det är bara 12 vilket inte är så 
            farligt, det som gör att routen har högt score är att den ger oss ett däck, kollar vilken knapp man klickar på i spelet, och kollar om spelet är slut 
            beroende på vad man klickade på för knappar samt visar alla korten man har dragit.
        </p>

        <p>
            Den högsta för en klass är GameOver metoden i BlackJack klassen där jag fick en CRAP score på 9, där man får både händerna och kollar vilka scores 
            dem ger med if satser, det som gör att jag får en score på 9 är att det är många if satser som den kollar vilket gör att koden är lite komplicerad 
            men jag har väldigt många tester som kollar att alla if satser funkar vilket så klart hjälper med CRAP scoren.
        </p>

        <img src="{{ asset('img/Crap.PNG') }}" width="100%">



        <h2>
            Phpmetrics
        </h2>

        <p>
            Med PHPMetrics så får vi ju väldigt mycket nummer och saker vi kan kolla på i våran kod, så det finns ju mycket man kan kolla på som visar vad man 
            skulle kunna förbättra.
        </p>

        <p>
            Så något jag skulle kunna förbättra är BlackJack klassens Complexity, eftersom jag har en score på 19 CC vilket jag skulle vilja få bli lägre, 
            något jag skulle kunna fixa är att dela upp gameOver metoden i flera metoder som jag kallar på för att kolla vem som vann istället för att kolla 
            på vem som vann i. 
        </p>

        <p>
            Eller så kan jag dela upp klassen i flera mindre klasser som har metoder jag kan kalla på för att få t.ex att få en hands score eftersom 
            mina Coupling scores, både AC och EC är väldigt låga vilket gör att det inte skulle skada om jag gör lite fler relationer mellan klasserna

        </p>

        <img src="{{ asset('img/phpmetrics1.PNG') }}" width="100%">

        <p>
            Något annat jag skulle kunna förbättra är klassen CardsGraphic som bara har en CC på 1 men en Maintainability på 56.
            För att öka MI så skulle jag nog behöva lägga till kommentarer som förklarar var metoder gör eftersom koden är väldigt simpel och gör inte så mycket, så 
            jag måste tänka på min Codestyle och hur viktig den är.
        </p>

        <img src="">

        <p>
            Jag skulle även kunna förbättra min ApiController, dens Cohesion är 6LCOM vilket är 3 högre än den som är näst högst, eftersom apiControllern har 
            så många olika saker som den gör så skulle jag kanske kunna dela upp den i mindre delar som gör det lättare att hålla koll på allt som finns i den 
            och gör så att den blir mindre komplex, eftersom just nu har jag ju alla olika saker som "testar" Cards, BlackJack, DeckOfCards klasserna och mera.
        </p>

        <img src="">

        
        <h2>
            Scrutinizer
        </h2>

        <p>
            Jag fick en score på 9.88 på Scrutinizer vilket är väldigt bra, hade bara 2 saker som inte fick A i betyg vilket var gameOver och getScore metoderna 
            vilket var dem metoderna som jag redan tänkte kanske behövde fixas. I detta fallet så var felet att kommentarer inte var riktigt korrekta för arraysen 
            och hur dem såg ut, så det är inte direkt något stort fel.
        </p>

        
        <img src="{{ asset('img/scrutinizer.PNG') }}" width="20%">

        <p>
            Mina Crap scores var inte häller särskilt höga eftersom jag hade rätt bra tester för min kod, hade 100% coverage på alla mina klasser vilket gjorde att 
            det inte spelade någon roll ifall dem var lite komplexa. Däremot när man kollar så kan man se att min coverage bara är 20% men det är eftersom vi har 
            så många test uppgifter eller annat som inte är nödvändigt för uppgiftenra vi har gjort som t.ex dice och sådant. En annan sak var att jag hade 28 "problem" 
            men bara 4 var Major och det var på filer som jag inte använde sen hade jag 24 minor issues vilket var för det mesta kommentarer som var fel.
        </p>

        <img src="{{ asset('img/Crap.PNG') }}" width="40%">


        <p>
            En sak jag skulle kunna fixa var ju såklart 2 Major problem för min QuoteController där jag har råkat ha en return efter 
            return $this->render('api.html.twig', $data); vilket såklart betyder att den andra returnen inte används och bara finns där, ett väldigt lätt 
            problem att fixa och det är för första kursmomentet där vi jobbade med att visa en random quote.
        </p>

        <img src="{{ asset('img/issues.PNG') }}" width="40%">


        <img src="{{ asset('img/scruIssues.PNG') }}" width="80%">

        <p>
            En anna sak som jag skulle vilja förbättra är att få betygen på mina metoder som hade b att bli A, tror det kan vara kommentarer som orsakar problemet 
            så den kan ändå vara en ganska simpel lösning.
            Om jag gör båda dem här sakerna så kan jag förmodligen öka min kvalitetsindex till 10 istället för att jag bara har 9.88 just nu, vilket inte är 
            den största ökningen men har inte så mycket "fel" just nu eftersom när jag gjorde tidigare övningarna så fixade jag 100% coverage på mina klasser vilket 
            har redan givit mig ett bra score på allting.
        </p>

        <img src="{{ asset('img/ScruRatings.PNG') }}" width="50%">

        <p>
            Jag skulle även kunna försöka göra tester till mina controllers för att öka min coverage på min kod, först ju nu har jag 100% på alla klasser men 
            inga tester på mina controllers, vilket så klart kan leda till att man får fel eller att något kan gå snätt under speciella tillfällen.
            Just nu har jag ju bara 20% total coverage och mina controllesr är ju bulken av koden så ökar jag den så ökas coverage för hela koden väldigt mycket.
        </p>

        <img src="{{ asset('img/scruCoverage.PNG') }}" width="100%">

        <diV style="padding-bottom: 50px;">
            <img src="https://scrutinizer-ci.com/g/tiae24/report/badges/quality-score.png?b=main" width="12%">
            <img src="https://scrutinizer-ci.com/g/tiae24/report/badges/coverage.png?b=main" width="12%">
            <img src="https://scrutinizer-ci.com/g/tiae24/report/badges/build.png?b=main" width="10%">

            <p>
                Glömde lägga in dem innan jag förbättrade men antar att dem updateras automatiskt ändå, men min coverage är så låg eftersom det är controllerserna 
                som drar ner den men jag kunde inte köra controller testerna i scrutinizer, dem funkade lokalt men inte när jag körde på scrutinizer det står lite mer 
                om detta vid förbättringar.
            </p>
        </div>




        <h2>
            Förbättringar
        </h2>

        <p>
            Jag har ju redan nämt flera flaws i min kod tidigare så nu är det dags att fixa några utav dem, den första saken jag vill förbättra i min kod är 
            att dela upp in BlackJack klass för att göra den mindre komplex. Eftersom mina EC och AC värden inte är särskilt höga så kan jag ta fördel av det och 
            dela upp och göra nya klasser som BlackJack klassen sen använder sig utav för att i detta fallet räkna ut värderna på ens hand och se vem som vann matchen.
            Detta kommer sänka min Cyclomatic Complexity för BlackJack klassen samt öka Maintainability Indexen på koden eftersom den nu är uppdelade i mindre delar. 
        </p>

        <h3>
            Förbättringen
        </h3>

        <h3>
            Nya klasserna
        </h3>
        <img src="{{ asset('img/SplitClass.PNG') }}" width="60%">

        <h3>
            Innan
        </h3>

        <img src="{{ asset('img/Complexity.PNG') }}" width="100%">


        <h3>
            Efter
        </h3>
        <img src="{{ asset('img/MI2.PNG') }} " width="100%">

        <table border="1">
            <thead>
                <tr>
                    <th>Class</th>
                    <th>Before (CC)</th>
                    <th>Before (MI)</th>
                    <th>After (CC)</th>
                    <th>After (MI)</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><strong>BlackJack</strong></td>
                    <td>19</td>
                    <td>69</td>
                    <td>4</td>
                    <td>85.5</td>
                </tr>
                <tr>
                    <td><strong>BlackJackHand</strong></td>
                    <td>–</td>
                    <td>–</td>
                    <td>8</td>
                    <td>89</td>
                </tr>
                <tr>
                    <td><strong>BlackJackWinner</strong></td>
                    <td>–</td>
                    <td>–</td>
                    <td>9</td>
                    <td>88</td>
                </tr>
                <tr>
                    <td><strong>DeckOfCards</strong></td>
                    <td>7</td>
                    <td>73.6</td>
                    <td>7</td>
                    <td>84.3</td>
                </tr>
                <tr>
                    <td><strong>Dice</strong></td>
                    <td>1</td>
                    <td>60</td>
                    <td>1</td>
                    <td>99.9</td>
                </tr>
            </tbody>
        </table>


        <h3>
            Vad jag gjorde
        </h3>

        <p>
            Det jag gjorde var att dela upp klassen blackjack till 3 olika klasser, blackjack som var nästan samma som innan men som använde sig utav metoder 
            från dem 2 nya klasserna, blackjackhand som tog hand och gav ett score till en hand som man skickade i och blackjackwinner som checkade vem det var som 
            vann blackjack matchen, koden var ju nästan identiskt bara att nu hade dem en egen klass som blackjack använde sig utav.
        </p>

        <p>
            Sedan så fixade jag även några av dem mindre från under 65 MI till över 85 MI.
        </p>

        <p>
            När jag skrev klart så fick jag 2 nya klasser med flera metoder i dem, alla fick en MainTainability Index över 85 och en Cyclomatic Complexity under 10
            Min BlackJack klass AC score ökades ju såklart inte men EC gick upp från 1 till 3
        </p>

        <h3>
            Innan
        </h3>

        <img src="{{ asset('img/CouplingScoreInnan.png') }}" width="100%">


        <h3>
            Efter
        </h3>
        <img src="{{ asset('img/CouplingScore.PNG') }} " width="100%">


        <h2>
            Issues
        </h2>

        <p>
            Den andra saken jag har tänkt förbättra är issuesen jag har fått i Scrutinizer, jag har 4 major, 2 är inte från min kod så det blir svårt att förbättra 
            dem men dem andra 2 är väldigt simpla att fixa, det är att jag har 2 returns efter en viss kod som gör att dem är omöjliga att köra och är bara 
            där men gör ingenting. Sen vill jag även fixa så många issues som möjligt, just nu verkar måpnga av dem ha med kommentarer att göra så fixar jag dem 
            kommer min kodstil vara mycket bättre och koden blir lättare att läsa och förstå särskilt när någon lärare ska rätta eller om man kommer tillbaka 
            efter typ ett år och kollar på koden. Så om jag fixar dem här issues så kan Maintainability Index öka och issues kommer ju såklart försvinna / minska.
        </p>

        <h2>
            Innan Förbättrningen
        </h2>
            <img src="{{ asset('img/issues.PNG') }}" width="30%">

        <h2>
            Efter Förbättrningen
        </h2>

        <img src="{{ asset('img/fixedissues.PNG') }}" width="30%">

        <h2>
            Vad jag fixade för någonting
        </h2>

        <p>
            Det som jag fixade var att ta bort två onödiga returns som inte användes eftersom dem redan var under return $this->render('game/game.html.twig', $data);
            dem andra 2 major issuesen är från filen <b><i>tools/php-cs-fixer/.php-cs-fixer.dist.php</i></b> vilket såklart inte är min kod.
        </p>

        <img src="{{ asset('img/scruIssues.PNG') }}" width="80%">

        <p>
            Dem andra saker var bara massa kommentarer som behövde fixas, jag hade redan kommentarer i koden men dem gav issues eftersom det var ett mellanrum
            i slutet av kommentaren för innehållet i en array array<string > och så lade jag array namnen i quotes. Så jag fixade ungefär 20 sånna, och för varje sak jag fixade så gick ju issuesen ner 
            1 eftersom det är inte är någon formel som ger oss ett värde för issues utan det är bara 1 issues = 1 problem.
        </p>

        <ul>
            <li>Gammla * @return array int, array{ suit: string, card: string, graphic: string } </li>
            <li>Nya    * @return array int, array{'suit': string, 'card': string, 'graphic': string} </li>
        </ul>

        <img src="{{ asset('img/minorissue.PNG') }}" width="70%">


        <h2>
            KodTäckning
        </h2>

        <p>
            Jag tänker även fixa så att jag har kodtäcking på minst 50% totalt, så då måste jag fixa tester till mina controllers eftersom jag redan har 100% på 
            alla mina Klasser. Då måste jag skapa WebTestCase tester för mina controllers, jag tänker inte göra några för komplicerade tester men vill 
            bara ha några tester som checkar att självaste sidan fungerar.
        </p>

        <p>
            Jag vill ju såklart öka kodtäckningen för att göra koden mer "säker", med testerna kan jag nu fånga om något går fel, öka kvaliten på koden och öka andra betyg 
            som t.ex CRAP score, MainTainability Index och såklart min coverage. Det är helt enkelt en bra "bas" som hjälper många delar av ens kod.
        </p>

        <h2>
            Innan Förbättrningen
        </h2>

        <img src="{{ asset('img/ControllerTest.PNG') }}" width="100%">

        <h2>
            Efter Förbättrningen
        </h2>

        <h3>
            Totala Coverage
        </h3>

        <img src="{{ asset('img/coverage2.PNG') }}" width="100%">

        <h3>
            Controllers Coverage
        </h3>

        <img src="{{ asset('img/Coverage3.PNG') }}" width="100%">


        <h3>
            Vad jag gjorde
        </h3>

        <p>
            Det jag gjorde var att lägga till tester som täckte alla andra delar av min kod som inte var klasser eftersom dem hade jag redan 100% coverage på, 
            det var väldigt simpla tester som bara kollade ifall sidorna funkade för mina controllers, sen fixade jag även så dice klassen hade tester även ifall 
            det inte riktigt var en del av min kod så tyckte jag att det skadar inte att öka dens coverage också, detta ökade ju såklart min coverage som ni ser 
            ovan.
        </p>

        <h3>
            Problem
        </h3>

        <p>
            Eftersom det var controllerna som jag fixade coverage för så funkade det inte att "köra" dem i scrutinizer, det funkade när jag körde phpunit localt men 
            inte när dem kördes i scrutinizer, så tog bort koden och lade koden i txt filer, sökte på discorden om det fanns något sätt och fixa men det stod 
            att det var överkurs att fixa det och hittade inget när jag googlade häller eller kollade på  
            <a href="https://github.com/dbwebb-se/mvc/issues/39">
                github
            </a>
        </p>

        

        <p>
            https://scrutinizer-ci.com/g/tiae24/report/badges/coverage.png?b=main
        </p>


        <h2>
            Scrutinizer Score
        </h2>

        <p>
            Den sista saken jag ville fixa var att få Scrutinizer värdet till 10, jag har bara 2 saker som måste fixas för det, gameOver och getScore metoden har
            fått betyget B. Jag väljer att göra det här för att jag vill ändå fixa båda dem 2 metoderna eftersom jag vill höja MainTainability indexen och 
            sänka Cyclomatic Complexity.
        </p>

        <p>
            För att höja metodernas betyg så behöver jag nog dela upp dem i flera mindre metoderna och ha t.ex getScore kalla dem, eftersom just nu har jag 
            9 och 8 conditions i metoderna. Metoderna har ju fortfarande bra betyg så det är inte direkt att dem är dåligt skrivna och skapar problem men jag vill 
            fixa dem för att bara fin slippa koden och göra så att en metoden inte gör för mycket olika saker och har för många if satser.
        </p>

        <h3>
            Vad jag gjorde
        </h3>

        <p>
            Det jag gjorde var ju såklart som jag nämde att jag delade upp metoderna jag skulle fixa i mindre metoder, så det var som en förlängning på 
            det jag gjorde när jag delade upp klasserna, nu tog jag det steget längre och delade upp metoderna i mindre metoder som jobbade med varandre, 
            detta ledda ju såklart till att betyg på meotderna gick från B - >  A och att min score gick upp till 10.
        </p>

        <h3>
           Betyg Innan
        </h3>

        <img src="{{ asset('img/scrutinizer.PNG') }}" width="25%">


        <h3>
            Betyg Efter
        </h3>

        <img src="{{ asset('img/scruScore2.PNG') }}" width="25%">



        <h3>
            getScore Betyg Innan
        </h3>

        <img src="{{ asset('img/HandGrade.PNG') }}" width="100%">


        <h3>
            getScore Betyg Efter
        </h3>

        <img src="{{ asset('img/HandGrade2.PNG') }}" width="100%">


        <h3>
            gameOver Betyg Innan
        </h3>

        <img src="{{ asset('img/WinnerCode.PNG') }}" width="100%">


        <h3>
            gameOver Betyg Efter
        </h3>

        <img src="{{ asset('img/WinnerGrade2.PNG') }}" width="100%">


        <h3>
            gameOver Kod Innan
        </h3>

        <img src="{{ asset('img/WinnerBefore.PNG') }}" width="100%">

        <h3>
            gameOver Kod Efter
        </h3>
        <img src="{{ asset('img/WinnerCode1.PNG') }}" width="100%">
        <img src="{{ asset('img/WinnerCode2.PNG') }}" width="100%">
        



        <h3>
            getScore Kod Innan
        </h3>

        <img src="{{ asset('img/ScoreBefore.PNG') }}" width="100%">

        <h3>
            getScore Kod Efter
        </h3>

        <img src="{{ asset('img/ScoreCode.PNG') }}" width="100%">
        <img src="{{ asset('img/ScoreCode2.PNG') }}" width="100%">




        <h3>
            Sämst Betyg Innan
        </h3>

        <img src="{{ asset('img/ScruRatings.PNG') }}" width="50%">


        <h3>
            Sämst Betyg Efter
        </h3>

        <img src="{{ asset('img/ScruRatings2.PNG') }}" width="50%">


        <h2>
            Diskussion
        </h2>

        <p>
            Man kan ju såklart tänka på clean code och jobba med det i å tanke, det är ju för en mesta del bara att tänka på hur du skriver din kod och 
            hur man delar upp den, använder sig utav kommentarer och annat. Det lättaste man kan göra att att tänka på sin code style eftersom då 
            behöver man ju inte tänka på det tekniska i sin kod bara hur man skriver det, det är även bra att tänka code style eftersom tillslut så skriver man det 
            korrekt automatiskt, man vill få det i muskel minnet. Det enklaste är ju även att jobba med phpmetrics och phpdocs i åtanke eftersom det går väldigt 
            fort att kolla vad man får vär mättal och betyg på sin kod, medans scrutinizer skulle kunna va någon gång ibland.
        </p>

        <p>
            En nackdel med code style är ju däremot att det kan ta väldigt lång tid att få allting att bli bra, som sagt så borde man ju ändå tänka på det lite 
            så man inte måste jobba med det i flera timmar efter man har skrivit sin kod, jag skulle säga att code style är nästan bara sunt förnuft.
            Det som kan ta lång tid är ju att fixa testerna för kodtäckning och som kollar om man får några buggar och att allt funkar rätt eftersom det har ju 
            inget med den koden du skriver att göra, det är sin egna lilla del vilket leder till att det kan ta en del tid eftersom du inte kan tänka på det när du 
            skriver t.ex dina klasser.
        </p>


        <p>
            Något bra med code styles är ju att ens kod blir mer läsbar och lättare att förså eftersom man har kommentarer, koden är uppdelad bättre med identeringar
            och kanske fler klasser och metoder som jobbar med varandra istället för bara en stor klass som gör allting.
            Koden körs ju även bättre desto högre score man har i t.ex scrutinizer och phpmetrics, så om man tänker och kollar på det kan man se kanske vad man inte 
            ska göra i sin kodeftersom det ger en dålig scores, eller t.ex vilka fel man har missat (issues) i scrutinizer, vilken kod som inte är täckt med tester 
            i phpmetrics.
        </p>

        <p>
            Detta är ju även något man kan tänka och jobba med mera, kanske inte med just scrutinizer och phpmetrics men saker man kan tänka på och fortfarande 
            stämmer i andra språk, som hur man kommenterar sin kod, hur man delar up metoder, hur man ska tänka på hur tester funkar och varför dem är bra och hur 
            man ska tänka på att koden blir rätt direkt när man skriver den och får det i muskel minnet direkt så det underlättar för en själv och någon som ska 
            kolla på ens kod.
        </p>


    </main>
{% endblock %}