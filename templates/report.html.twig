{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}

    <div class="two-col-layouts">
        <aside class="aside">
            <h4>Innehållförteckning</h4>
            <ul>
                <li><a href="#kmom01">kmom01</a></li>
                <li><a href="#kmom02">kmom02</a></li>
                <li><a href="#kmom03">kmom03</a></li>
                <li><a href="#kmom04">kmom04</a></li>
                <li><a href="#kmom05">kmom05</a></li>
                <li><a href="#kmom06">kmom06</a></li>
                <li><a href="#kmom10">kmom10</a></li>
            </ul>
            <h4>Kursrepo</h4>
            <p><a href="https://github.com/dbwebb-se/mvc">Kursrepo på github finns här</a></p>
        </aside>


        <main class="main">
            <article class="article">
                <h1>Redovisning</h1>

                <h2 id="kmom01" class="reports">kmom01</h2>

                <p>
                    Så jag har inte jobbat kring objektorientering så mycket innan, men inom oopython så jobbade jag såklart runt det. Så jag har ju såklart inte så mycket erfarenhet med det men oopython kursen var ju precis så det jag jobbade med är “fräscht” på minnet.


En klass är som en mall för objekt i php, och ett objekt skapas utifrån en klass, ett objekt har medlemsvariabler och metoder. Ett objekt samlar all sin förmåga i metoder och properties, allt som ska lagras finner man i dess medelmsvaraiabler och allt man kan använda sig av med objektet exponeras via dess metoder.
Innan man kommer igång med sina första klasser måste man veta hur man kan använda sig utav ett objekt utan att använda sig utav klasser t.ex i ett muteable objekt som är ett objekt som kan förändra sin struktur under sin levnadstid. Så innan man börjar kan man t.ex testa skriva ut någon text och ett nummer med två properties och lära sig hur det funkar.


                </p>
                <p>
                    Så var lite osäker på hur koden är strukturerad och används i me/report och är fortfarande det eftersom det är så mycket att lära sig på en gång, men förstår ändå lite och säkert det som jag gjort med Controller.php och twig delarna.
Jag tycker det är skönt att koden är väldigt uppdelad så det är lätt att hitta vad man ska hitta men ändå lite jobbigt eftersom det är så mycket olika ställen att hålla koll på.
Hittills var det ändå rätt simpelt, och folderna förklarande ändå för det mesta, vi hade t.ex assets som hade styles, src, js osv, templates som hade våra twig filer som va våra templates, src/controller som hade våra controller php filer där vi gjorde våra klasser.
Så sidan var ändå ganska lik det vi gjorde i typ webbdesign men nu är det lite mer fokus på backend sakerna.

                </p>

                <p>
                    En av delarna jag fann extra intressant och ändå värdefull var att skriva sakerna i en pattern, det underlättar sen så att det man gör ser likadant ut på olika sidor och så man vet vad som gör vad, som t.ex i våra controller php filer ser koden exakt likadan ut på alla sidor men det enda som ändras är innehållet i våran route function, då kan vi lätt se vad som är vad och vad som gör vad vilket underlättar om man ska göra något liknande som en anna route, eller för att gå igenom ens kod och felsöka. Och jag brukar ändå alltid göra det men har inte tänkt på det för mycket att jag gillar att strukturera koden på ett visst sätt så det ser snyggt ut och är lätt läsbart.

Min TIL för detta momentet var, att jobba i en klass och använda mig utav routes för att visa upp en hemsida och dess templates med den datan jag ville som i javascript och det vi gjorde i databas kursen, men nu istället är det ju i php.

                </p>

                <h2 id="kmom02" class="reports">kmom02</h2>
                <p>
                    Arv är ju när en en klass ärver från en annan klass, man kan ju säga att den nya klassen som ärver från den andra är en utökning av basklassen.
                </p>
                <p>
                    Komposition är när en klass har en annan klass i sig och använder den, i vårt fall har ju DeckOfCards 2 klasser som den använder (Cards, CardGraphic).
                </p>
                <p>
                    Interface är som ett kontrakt där en klass lovar att erbjuda vissa metoder, interface innehåller ingen kod som klasserna kan återanvända utan är bara ett löfte att interfaces metoder ska finnas inuti klassen.
Så vi kan göra en interface, och sedan implementera den i våran klass för att använda den.

                </p>
                <p>
                    
Trait är väldigt likt arv men är gjort annorlunda, en trait är typ som en funktion man har i klassen som är gjort utifrån, så vi kan göra en trait som kanske skriva ut “hej”, och sedan använda vi traiten i klassen och då får våran klass tillgång till det.

                </p>
                <p>
                    Så jag hade kommit lite efter så är helt okej nöjd med uppgiften, allt funkar som det ska men skulle fixa hur allt ser ut på sidan lite bättre, och kanske fixa shuffle, just nu så shufflar jag en kopia av decket, men skulle vilja fixa så jag shufflar självaste decket.
                </p>
                <p>
                    Det gick ändå ganska bra att fixa allt, hade ju dice uppgiften som något man kunde kolla på av hur man gjorde klasserna och hur funktionerna funkade, visste redan att det var DeckOfCards som skulle ärva från dem andra klasserna. 
                </p>
                <p>
                    Jag hade ju redan en sida (session) där jag kollade i JSON om allt funkade, så när jag väll skulle fixa api sidorna så gick det väldigt fort, då kunde jag bara göra routes dit och sen kopiera in koden jag hade där.
                </p>

                <p>
                    Jag började med att jobba på klasserna, så jag gjorde klart cards först sen DeckOfCards och testa om det funkade i sidan session, jag gjorde bara grunderna då så jag kunde få en kortlek, sen gjorde jag sakerna i ordningen som stod på uppgiften, shuffle var ju ganska lätt och fixa, eftersom det var bara att använda sig av shuffle(deck), så det gick väldigt fort medans draw tog mycket längre tid för jag fick alltid felet att jag skicka in en array i $data men det behövde vara en string, men sen gjorde jag så man skrev in ett nummer och så loopade man igenom decket så många gånger och tog fram ett random nummer från 0 till antalet kort, och sedan la jag till det i en array och tog bort kortet från decket, och så loopade det om.
                </p>

                <p>
                    
Det har vart helt okej att jobba i Symfony, det är ganska lätt att se när man får ett fel vad som kan vara felet och vart det ligger, det är väldigt likt det vi gjorde i databas kursen med routes och sånt men detta känns lite mer strukturerat och det är lite enklare att hitta vart allting ligger och hur man delar upp allting.
Det är också hyfsat lätt att jobba array och sånt och få dem att funka i twig, så det var inte så mycket problem att få decksen att funka och t.ex loopa igenom dem.

                </p>

                <p>               
Tror inte jag hade jobbat med klasser i php förut så visste inte riktigt att man kunde göra det, så det var typ det jag lärde mig, och hur dem funkar, skönt ändå att jag har gått oopython kursen innan också så det går ändå fort att lära sig eftersom sakerna man gör som t.ex routes eller klasserna är super likt det man gör i andra kurserna.

                </p>

                <h2 id="kmom03" class="reports">kmom3</h2>

                <p>
                    Det var lite jobbigt att hålla på med pseudokod och flödesdiagram i början för det känns som jag verkligen behöver sätta mig ner och pausa innan jag börjar för att nästan tänka igenom allting jag ska göra, i alla fall en mall av uppgiften.

                </p>

                <p>
                    Vilket är lite jobbigt på ett sätt för jag vill gärna börja koda direkt men jag skulle ändå säga att det hjälper mig för då får jag en bild av vad jag ska göra och kanske hur jag ska göra det, då har jag ju som jag nämnde en skiss jag kan gå tillbaka och kolla på ifall jag fastnar på någonting och se hur jag ska tänka eller hur jag kanske tänkte jag skulle lösa det när jag började på uppgiften.
                </p>

                <p>
                    Jag är helt okej nöjd med uppgiften, självaste kodningen kändes ändå hyfsat lätt jag skulle ju såklart kanske kunna fixa en CardHand klass som jag sparar händerna i för spelaren och dealern men jag kände ändå att det inte behövdes, får se om jag ändrar mig längre fram.
                </p>

                <p>
                    Det första jag gjorde när jag skapade var självaste drawCard delen för Blackjack och spara korten i händerna, och det var ju ändå super simpelt det var att dra ett kort från kortleken och sen spara ner i en array.
                </p>

                <p>
                    Jag gjorde också så att drawcard hade en parameter där man skrev in vem det var som skulle lägga till ett kort i handen, så ifall det var spelaren så skickade jag in “player” när man klickade på knappen, och när man klickade på stanna så var det ju dealerns tur, och eftersom vi inte har någon fysiskt dealer så körde jag bara en loop som körde till man fick en viss “poäng” för dealer handen, så sen gjorde jag getScore som tog en hand man skickade in och loopade igenom korten i den och kollade vad handen var värd, och så körde jag insatser för att ge kung, drottning, knäckt och ess deras värden, och jag gjorde så att ifall man drog ett ess så kollade man först hur många poäng man hade, så ifall vi hade t.ex 10 poäng och drog ett ess så var esset bara värt ess eftersom annars hade vi ju förlorat.
                </p>

                <p>
                    Våran gameover var väldigt simpel, där vi bara checkade poängen, och varje gång vi var i game/play så checkade vi ifall spelet var över för att vara redo att uppdatera hur sidan såg ut och ta bort knapparna.
                </p>

                <p>
                    Jag tycker det har varit riktigt skönt och ändå lätt att använda symfony, det går fort att felsöka, det går fort att uppdatera om man har gjort något fel eller vill t.ex ändra något i css och det är lätt att hålla reda på vart allting ligger och vad allting gör, eftersom vi har våra controller, våra klasser osv så det har faktiskt varit ganska kul och lätt att komma igång i även fast jag hamnade lite efter.
                </p>

                <p>
                    Lint delen var det största jag lärde mig, hade ju inte fixat några kommentarer och förklaringar av vad funktionerna gjorde så behövda kolla på https://phpstan.org/blog/solving-phpstan-no-value-type-specified-in-iterable-type och läsa massa där för att ta reda på hur jag skulle fixa fel meddelandena jag fick.
                </p>



                <h2 id="kmom04" class="reports">kmom04</h2>

                <p>
                    Det kändes ganska bra att skriva koden för att göra tester, det är ju inte de mest komplicerade testerna men det gjorde jobbet. Det var väldigt likt det vi gjorde i pythonkursen vill jag säga där vi gjorde tester för våra klasser och det funkade nästan på exakt samma sätt utan att kod språket vi använder är ju så klart olika, men principerna är ju nästan exakt samma.
                </p>

                <p>
                    Men det har varit väldigt skönt och coolt att jobba med PHPUnit, jag tycker man fick ändå en liten bättre bild på av sakerna man kanske hade missat i klasserna som t.ex att man kunde göra en egen hand utan att behöva dra kort (så det inte är slumpmässigt).
                </p>

                <p>
                    Tyckte det även var skönt att man hade en sida man kunde kolla och se hur testerna gick och om de var tillräckligt bra och hur mycket av ens kod testerna täckte.
                </p>

                <p>
                    Jag lyckades nå 100% kodtäckning för de 4 klasserna jag använde i kortspelet, eftersom kunde se exakt vad av koden mina tester täckte så var det ju lätt att lista ut vad jag behövde testa, och visa klasser som cardGraphic och Cards var ju super korta och var nästan täckta innan jag ens gjorde testerna.
                </p>

                <p>
                    Den mesta av min kod var testbar så det gick ändå ganska bra att testa, hade en sak som jag var osäker på hur jag skulle lösa men kom på att jag inte behövde ha kvar den funktion i klassen DeckOfCards, så jag tog bara bort den (det var sort metoden jag tog bort).
                </p>

                <p>
                    Men sen stötte jag på lite problem när jag skulle testa scoring och kolla om blackjack matchen var över och vem som vann eftersom det är svårt att testa när det man får tillbaka är random, så jag gjorde så jag kunde välja hur spelarens och dealerns händer skulle se ut för att sedan underlätta testningen. Annars skulle jag säga att allt gick och testa, gjorde bara olika scenarion som t.ex testade ifall dealern fick 21, över 21 osv.
                </p>

                <p>
                    Som jag nämnde tidigare så var det vara att jag tog bort saker som inte behövdes som min sort() eftersom självaste metoden användes inte, så jag tog bara bort den och jag var också lite osäker på hur jag skulle testa den.
                </p>

                <p>
                    Men sen gjorde jag två metoder där jag kunde välja hur dealerns och spelarens hand skulle se ut vilket gjorde att jag egentligen inte behövde ändra andra delar i koden eftersom jag behövde inte dra random kort för att få mina händer, eller t.ex lägga till så jag kunde välja vilket kort jag skulle få när jag drog ett kort.
                </p>

                <p>
                    Men jag tänkte bara att det kunde vara bra att ha ett sätt att kunna skapa mina egna händer och så underlättade det för när jag skulle skriva testerna.
                </p>

                <h3> Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”. </h3>

                <p>
                    Både ja och nej skulle jag säga, det blir lättare att testa koden ifall den redan var bra skriven och lätt att förstå eftersom då vet jag allting i metoderna gör och hur jag ska testa det, samt så behöver jag inte skriva lika mycket saker för att testa allting i metoden.
                </p>

                <p>
                    Så t.ex när jag skulle testa delen i blackjack för vem som vann blev det lite mer att skriva eftersom det finns så många scenarion jag måste testa vilket kanske gör att koden inte blev lika snygg och ren, medans när jag skulle testa något som att dra ett kort var det ju bara att dra ett kort och se att jag fick någonting och att det var ett kort.
                </p>

                <p>
                    Jag skulle säga att den “största” jag lärde mig i den här delen var om att dokumentera och hur man gör det, kom ju upp mycket fel t.ex varför en klass var “fel skriven” för man inte hade dokumenterat att man returnade något och vad man returnade, som tur så fanns https://phpstan.org/writing-php-code/phpdocs-basics där jag kunde få exempel på hur man skulle dokumentera vissa saker som t.ex arrays.
                </p>

                <h2 id="kmom05" class="reports">kmom05</h2>

                <p>
                    Det gick ganska bra, kollade på genomgång videon medan jag gick igenom övning och det var lätt att förstå och jag förstod vad som hände och vad man gjorde för någonting.
                </p>

                <p>
                    Eftersom jag redan har gjort databas kursen så hänger jag ju med hur en databas funkar och i databas kursen så jobbade vi ju med former och att mata in saker i en databas men i javascript, men princip och det man gör är ju typ exakt samma sak med routes, och i istället för twig så var det ju ejs istället, så skulle faktiskt inte säga att jag hade någon chock eller tyckte det var svårt att förstå vad man gjorde.
                </p>

                <p>
                    Skulle säga att min största reaktion och det som jag tänkte när jag gjorde övning var hur likt detta var det man gjorde i databas kursen.
                </p>

                <p>
                    Jag skulle säga att när jag började göra UI grejerna så ville jag ha ett ställe som en “hub” nästan, där man kunde hitta allting, du kan klicka på en boks bild för att se info för den individuella boken (hade velat haft lite mer info, text om boken till höger), man kan klicka på edit för att uppdaterar boken, delete för att ta bort den.
                </p>

                <p>
                    Sen när man hade gjort något så kom man alltid tillbaka till tabellen där man info om allting, detta gör det så att sidan är lätt att förstå och det är lätt att gå mellan de sakerna man vill göra.
                </p>

                <p>
                    Sen så tänkte jag inte så mycket av hur det skulle se ut, speciellt för att vi inte hade så mycket info i databas som vi ville visa, så fanns inte så mycket jag kunde göra så höll det rätt simpelt.
                </p>

                <p>
                    Det gick ändå ganska bra, vi har ju jobbat med klasser ganska mycket så har ändå en bra idé av hur bok klassen som vi skapar “automatiskt” funkar, sakerna är lätt att förstå. Det blev även mycket lättare att göra dem simpla sakerna för i t.ex databas kursen när vi skrev i sql så var det mycket mer jobb i att få databasen att funka medans här så är det super simpelt att skapa en bok, ändra innehållet i den och ta bort den, det ända jag skrev i sql var att göra så man kan söka efter en bok med en viss ISBN, annars funkade all "standardkod" vi fick när vi skapade databasen med doctrine.
                </p>

                <p>
                    Det var även mycket lättare och man behövde inte hoppa runt lika mycket mellan t.ex där databasen låg och testköra och få den nyskrivna koden att funka, för i databas kursen behöver man skriva all sql kod för att få självaste databasen att funka och behövde dubbel testa varenda minsta fel och detalj, medans här var det mycket lättare att komma igång och få saker att funka.
                </p>

                <p>
                    Jag skulle säga att min uppfattning om ORM så här långt är att det är en förenkling och ett sätt att få det snabbare att skriva och skapa databaser och att jobba i dem. Det är lättare att hålla koll på vad man gör eftersom man har metoder som gör sakerna, antingen enkla som typ findAll eller sådana som setX för att göra en ny produkt. 
                </p>

                <p>
                    Så man behöver inte t.ex ha 3 olika ställen där man skickar in sql kod, skickar in data, hämtar data osv utan man har metoden och sedan kan man kalla på den när man vill, så man behöver inte göra massa procedures och hålla koll på flera variabler i de olika ställen man har den, det är alltså mycket enklare att hålla koll på vad allting gör och hur allt fungerar.
                </p>

                <p>
                    Man behöver heller inte skriva i sql eller skriva mycket mindre eftersom man kan använda sig av t.ex 
                </p>

                <h3>
                    ->andWhere('b.exampleField = :val')
                </h3>

                <h3>
                    ->setParameter('val', $value)
                </h3>

                <h3>
                    ->orderBy('b.id', 'ASC')
                </h3>

                <p>
                    som gör allt som ens sql kod ska göra men är mycket enklare och lättare att skriva, och så behöver man inte jobba lika mycket i sql.
                </p>

                <p>
                    Mitt TIL för detta kom var att man kan göra en databas sådär som en klass och hur den funkar, hade ingen aning att man kunde göra en så lätt där man inte behöver göra allting och självaste databasen funkar så lätt, och att man kan använda sig utav set och get för att skriva datan och få tillbaka datan.
                </p>

                <h2 id="kmom06" class="reports">kmom06</h2>

                <p>
                    Jag tyckte att phpmetrics var väldigt hjälpsamt, det gav mig en bra bild på vad i koden som kunde förbättras och varför en metod kanske kunde skapa problem eller inte var så optimerad som jag trodde den var.
                </p>


                <p>
                    De sakerna som jag ansåg var mest hjälpsamma var Coupling, och Cyclomatic Complexity / Maintainability index, det känns nästan som att de gav mig all info jag behövde. De visade mig hur bra en klass funkade, hur komplicerad och hur “lätt” det var för den att funka / köras och sedan så visade ju Coupling hur mycket en klass använde / användes av andra klasser, man vill ju hitta en bra balans med att inte ha en klass som används / använder för många klasser eftersom då behöver man fler tester som verkligen gör att allting funkar som det ska, annars ifall det blir fel i någon klass kan ett flertal drabbas av det.
                </p>


                <p>
                    Jag skulle även säga att Bilden som visade datan för CC och MI var den bästa eftersom den visualiserade datan vi hade så man fick en bild man kunde se vilken klass som var “sämst” och hur den jämfördes med en annan klass, då kunde man ju kolla och se varför en klass var sämre än den andra.
                </p>


                <p>
                    Det gick ganska bra att få scrutinizer att funka men jag hade ett problem med det, när jag fixade mina tester för controllers för att öka min coverage så funkade det inte att köra dem i scrutinizer och jag fick felmeddelanden, men när jag körde dem lokalt så funkade mina tester och min coverage ökade, jag försökte läsa i githubs frågor och svar och på discord men hittade ingen lösning så var tvungen att ta bort den delen men annars gick det bra att använda och att förstå hur det funkade.
                </p>


                <p>
                    Jag skulle säga att scrutinizer var bättre för att hitta fel i ens kod, man hade ju issues som visade exakt vad för problem det var man kunde lösa, jag skulle säga att scrutinizer var bättre att veta exakt vad som kunde lösas eftersom man hade betyg på metoderna och phpmetrics var bättre att visa vilken klass som hade problem, så det var ett bra “team” man hade, att om man fixade t.ex en metod så ökade ens CC och MI i phpmetrics, och ifall man fixade något i phpmetrics som att dela upp ens klasser så kunde det öka ens betyg eller sänka ens issues.
                </p>


                <p>
                    Scrutinizer var jobbigare att använda eftersom det tog mycket längre tid att få det att köras eftersom man behöva pusha allt till github och sedan vänta i typ 6 minuter och ifall något gick fel var man tvungen att fixa felet och göra om det, så när jag använde mig av scrutinizer så försökte jag fixa så många saker som möjligt innan jag pushade upp något nytt på github.
                </p>


                <p>
                    Badges man hade var ju inte direkt någon stort hjälp, man kunde ju redan se saker som coverage på docs/coverage vilket gick mycket snabbare att titta på och gav mig en bättre bild på vad som inte vad kodtäckt och vad som behövde fixas.
                </p>


                <p>
                    Innan jag började så hade jag 9.88 i scrutinizer score med 2 metoder som hade fått ett B betyg och en coverage på 20%, min score ökades till 10 eftersom jag fixade metoderna när jag delade upp klasserna i 3 klasser och sedan metoderna i flera metoder som körde de olika delar som t.ex kollade ifall man fick 21, ifall man fick över 21 osv. 
                </p>


                <p>
                    Min coverage ökades däremot inte så mycket eftersom jag hade redan gjort 100% på alla mina klasser innan jag började med kurs momentet vilket gjorde att det ändas som kunde ökas var små klasser som inte gav så mycket % och mina controllers men jag kunde inte köra mina controller tester på scrutinizer, dem funkade som sagt lokalt men inte på scrutinizer jag läste på discord att det skulle vara överkurs och hittade inget sätt att fixa det så min coverage gick bara upp till 26%, annars med testerna gick den upp till 78% på docs/coverage för alla saker i src mappen.
                </p>


                <p>
                    Jag skulle säga att kod kvaliteten är extremt viktigt, det är basen av ens kod, det kan vara allt från att man har bra kodstil där allt ser snyggt och prydligt ut vilket gör koden lättläst och lätt att förstå, till att fixa så att koden har bra med tester som gör att allt funkar som det ska och inga buggar sker, men även saker som kollar hur bra ens klasser är uppbyggda (vilken CC dem har) och hur lätt den är att köra.
                </p>


                <p>
                    Ens kod kvalite berättar ju så mycket om koden, man kanske inte behöver en den perfekta koden men en bra nivå som täcker majoriteten av ens kod är ju något man ska sträva efter, det är även något bra att tänka på när man skriver så man sätter det i baktanken så det nästan blir automatiskt när man skriver sin kod, vilket underlättar när man kanske har gjort något fel, eller gör så att man inte behöver ändra sina klasser för mycket och gör dem för komplicerade när man skriver sin kod.
                </p>


                <p>
                    Jag hade däremot inte sagt att badges som man ser på scrutinizer spelar så stor roll eftersom man får ju inte så mycket detaljer av varför något är bra eller dåligt, badges ger bara en bra översikt av hur koden är men man får ju såklart inga detaljer så det kan vara en bra indikator om ens kod men inget mer än de.
                </p>


                <p>
                    Jag skulle säga att mit TIL för det kmom var hur mycket man kan och nästan ska dela upp ens klasser och metoder, tänkte att jag hade gjort det ganska bra innan jag började med uppgiften men mina scores vare sig det var CC, MI eller betyg var inte tillräckligt bra, samt hur viktigt kommentarer kan vara för att öka ens scores.
                </p>


                <h2 id="kmom10" class="reports">kmom10</h2>


                <p>
                    När jag började tänka på vad jag ville att projektet skulle fokusera på så var det ganska lätt, jag hade ju redan gjort ett kortspel (21) vilket är väldigt likt blackjack så jag tänkte att jag bara fortsätter på det jag har.
                </p>

                <p>
                    För det första så kopierade jag alla klasser jag använde för (21) och lade in dem i en ny mapp för projektet, där började jag göra om det för blackjack, jag tänkte att detta sättet gjorde att det gick mycket fortare eftersom jag inte behövde ändra någonting i Cards och CardsGraphic klasserna och för klassen DeckOfCards behövde jag bara göra så man kunde göra flera kortleckar.
                </p>

                <p>
                    För att fixa det så gjorde jag bara så man kunde ge en input i DeckOfCards där man valde hur många kortlekar man ville ha och sen loopade man bara igenom där vi gjorde kortlekarna så många gånger.
                </p>

                <p>
                    När jag sedan började göra så man kunde spela med flera händer så ändra jag så att playerHands var en array som tog emot händer, så man fick istället t.ex “player” 
                </p>

                <h3> 0->Hand 1 </h3>
                <h3> 1->Hand 2 </h3>
                <h3> 2->Hand 3 </h3>

                <p>
                    För att sedan implementera det så var det bara att lägga till så att man var tvungen att skicka i vilket hand nummer man drog ifrån för att sedan skicka in som förut men nu hade vi $playerHand[“player”][nummer][] där vi skicka in det dragna kortet.
                </p>

                <p>
                    När jag sedan försökte implementera allting första gången så fick jag det och funka men det var ett litet problem, jag hade gjort det mesta i Controllern, så självaste routen blev fylld med ganska många if satser som checkade vilken knapp jag klickade på t.ex Första handens Draw, vilket skulle göra att jag drog ett kort till den handen, eller första handens stand vilket skulle göra att första handens knapp försvann.
                </p>

                <p>
                    Så jag behövde ju såklart få in det där i klassen då gjorde jag en egen klass och en metod som vad action, jag hade en action i BlackJack klassen och en i den egna BlackJackAction klassen, i blackjack klassen så kollade jag ifall man klickade på draw eller stand, klickade man på draw så kollade man med en metod vilken spelares knapp som hade klickats på, om det var draw1 så betydde det att jag klickade på första handens draw knapp, vilket ska leda till att dra ett kort för första spelarens hand.
                </p>

                <p>
                    Om jag klickade på stand så kallade man på klassen BlackJackAction och dess metod, där inne gjordes allt som fixade så att man sedan tog bort hand knappen för denna hand man klickade stand på.
                </p>

                <p>
                    I BlackJack så hade vi en array som hette $stand, där vi hade strings som kollade ifall en knapp hade blivit klickad på eller inte, värden var “Go” vilket betydde att handens knapp inte hade blivit klickad på, men när man klickade på stand så skickades den i metoden som jag nämndes innan och ändra “Go” till “Stop” och så fick man tillbaka den nya array som ändra $stand, så nu hade en knapp stängts av.
                </p>

                <p>
                    Jag hade sedan en metod dealersTurn som checkade ifall alla stand knappar hade blivit klickade på, isåfall var det dealerns tur att börja dra kort tills den fick över 17.
                </p>

                <p>
                    Jag hade även fixat så att dealern drog ett kort i början av spelet med en if som checkade ifall $score = 0 så drog man bara en gång, annars var det en while loop som drog till man fick över 17.
                </p>

                <p>
                    Bank klassen jag gjorde var ändå väldigt simpel och lätt att göra, jag gjorde 2 arrays som var bets och winners, och sedan en int som var balans, winners var ju såklart pengar man vann, och bets var betsen man hade lagt. 
                </p>

                <p>
                    När man kallade på klassen så skulle man ge hur många spelare som skulle köra och vilken balans man hade.
                </p>

                <p>
                    Jag loopade sedan igen winners och bets och skapade en nyckel och gav dem ett värde på noll, så ifall jag hade valt 5 players fick jag 5 ställen att lägga bets.
                </p>

                <p>
                    Sedan hade jag en placeBet metod där man gav en index och placerad bet för den indexen samt hur mycket man ville beta.
                </p>

                <p>
                    Jag hade sedan en metod som kollade för varje bet index vilken hand som vann, så ifall hand1 vann så fick bet1 tillbaka pengar, eller om man förlorade så fick man inte tillbaka några pengar.
                </p>

                <p>
                    När jag skapade självaste hur sidan såg ut så gjorde jag en ny css fil som var projekt och importa den med app.js.
                </p>

                <p>
                    Alla klasser som användes döpte jag till någonting projekt eller något som var exklusivt till projektdelen.
                </p>

                <p>
                    Eftersom mina sidor för dem andra kursmomenten var gula och ljusa så ändrade jag till en mörkare sida med allting i mitten,  istället för att ha saker i mitten och sedan ha dem text-align left så körde jag allting med text-align center och justify content center. Färgerna var också mörk som huvud färg med gul och vit för att skriva texterna.
                </p>

                <p>
                    I mitt 21 spel så hade jag inget direkt bort där korten låg, så nu bestämde jag mig för att göra ett klassiskt dealer bort med grön bakgrund och bruna borders som täckte hela widthen, där inne hade jag så många händer som man hade valt när man starta igång spelet, först fick man betta på händerna och när man sedan hade gjort det så kunde man börja spela, alla händer hade 2 knappar, (draw) och (stand), när alla händer var färdigspelade så drog dealern klart på sin hand och så såg man vilken hand som vann eller förlorade och hur mycket man vann eller förlorade.
                </p>

                <p>
                    Jag fixade även kodtäckning över 90% på alla mina klasser men jag var lite osäker på om jag skulle fixa för controllerna eftersom när jag kör dem lokalt så funkar testerna men när jag sedan laddar upp på github och dem körs på scrutinizer så får jag errors så jag har testerna för dem skrivna i txt filer eftersom när jag lämnar in vill jag att scrutinizer ska funka.
                </p>

                <p>
                    För api så valde jag att välja 2 posts, en där man kunde lägga in bets på bank klassen och se hur det såg ut, formen där man posta hade 3 fält att fylla i bankens total pengar, hur många och vad man vill betta på alla, jag valde att bara köra samma bets på alla eftersom jag ville inte ha för många fält att fylla i.
                </p>

                <p>
                    Den andra api som postade hade jag där man drog kort, man valde hur många man ville dra och så drogs det antingen till man fick 21 eller förlorade eftersom man inte ska kunna dra kort när man har förlorat.
                </p>


                <p>
                    Resten var ställen där man kunde se hur en avklarad match såg ut, man såg saker som hur 3 händer kunde se ut, hur det såg ut för Dealern och hur man såg vilka händer som hade vunnit.
                </p>


                <p>
                    Jag hade ju redan gjort en api del med massa routes innan så jag visste redan hur jag skulle skriva allt och hade en bas, så jag återanvände mig av lite där för att t.ex skriva ut mina routes på twig, och så var min blackjack klass hyfsat lik men nu så använde jag mig av dem nya metoderna och fyllde med parametrarna som behövdes.
                </p>


                <p>
                    Så istället för bara en drawcard så gjorde jag det med action(“draw1”), action(“draw2”) osv för att dra för flera händer.
                </p>

                <h3> Hur det gick </h3>


                <p>
                    Projektet gick helt okej att genomföra, det tog lite längre tid att göra än vad jag trodde det skulle ta, det tog cirka 5-6 dagar att bli klar med allting.
                </p>


                <p>
                    Det svåraste var att göra om min gamla blackjack(21) klass som jag använde för spelet 21 och få den nu att funka med flera händer, flera knappar som man kan klicka på och få spelet att sluta när alla händer har antingen förlorat / fått 21 eller att man har klickat på stand knappen.
                </p>


                <p>
                    Jag gjorde ju även mycket av if satserna i controllern först så behövde sedan fixa så det var metoder i Blackjack och inbyggda som tog lite mer tid än vad jag trodde det skulle göra.
                </p>

                <p>
                    Banken var däremot väldigt lätt att göra eftersom det var en så simpel klass och jag gjorde den sist så hade redan hunnit tänka ganska mycket på hur jag ville att den skulle se ut och hur den skulle funka.
                </p>

                <p>
                    Projektet var som sagt inte så svårt bara lite mer tidskrävande än vad jag först trodde, var även lite jobbigt att jag var tvungen att fixa sidan så den såg annorlunda ut men det gick ändå ganska fort, jag tycker det var ett bra och rimligt projekt för kursen eftersom det jag valde (kortspelet) var ju egentligen det jag redan hade gjort under kursen och byggde bara på det som redan fanns, jag tycker också det är ganska skönt när man jobbar i samma ställe som man alltid har så man inte behöver startas om från början utan kan direkt komma igång med kodningen.
                </p>

                <h3> Hela kursen </h3>

                <p>
                    Jag tycker kursen var ganska rolig, kursen hade en bas som vad hyfsat lik de andra kurserna t.ex i hur man jobbar med routes och dem funkar, samt så hade jag redan jobbat med twig innan, jag hade gjort klasser och jobbat med det i oopython och dem flesta uppgifterna var väldigt roliga att göra och inte allt för svåra.
                </p>

                <p>
                    Allt material var väldigt hjälpande och man kunde alltid hitta något som kunde hjälpa en för ett kursmoment vare sig det var en övning, genomgångar osv.
                </p>

                <p>
                    Däremot gillade jag inte kmom06 där man skulle skriva väldigt mycket, det var förmodligen uppgiften som tog mig längst tid att bli klar med inte för att det var supersvårt men tyckte bara uppgiften var lite tråkig och det var jobbigt att jobba med scrutinizer för saker som controllers testerna eftersom dem funkade inte i scrutinizer så var lite osäker på hur jag skulle göra det.
                </p>

                <p>
                    Jag är lite missnöjd över mig själv i kursen, tycker jag har gjort uppgiften ganska bra men hamnade lite efter i kursen i början så mina inlämningar var nästan alltid lite sena vilket inte direkt skadade kvaliteten på mina uppgifterna men kändes bara lite jobbigare det har inte hänt någon annan gång i några kursen så kanske bara var att jag blev lite lat nu när sommaren är nära. Men annars är jag nöjd med det jag gjorde i kursen och hur kursen var uppsatt.
                </p>

                <p>
                    Jag hade gett kursen 8/10, roliga uppgifter, bra hjälp material, lätt att förstå och komma igång med symfony och få allting att fungera som det skulle.
                </p>



            </article>
        </main>
    </div>

{% endblock %}