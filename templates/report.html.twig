{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}

    <div class="two-col-layouts">
        <aside class="aside">
            <h4>Innehållförteckning</h4>
            <ul>
                <li><a href="#kmom01">kmom01</a></li>
                <li><a href="#kmom02">kmom02</a></li>
                <li><a href="#kmom03">kmom03</a></li>
                <li><a href="#kmom04">kmom04</a></li>
                <li><a href="#kmom05">kmom05</a></li>
                <li><a href="#kmom06">kmom06</a></li>
                <li><a href="#kmom10">kmom10</a></li>
            </ul>
            <h4>Kursrepo</h4>
            <p><a href="https://github.com/dbwebb-se/mvc">Kursrepo på github finns här</a></p>
        </aside>


        <main class="main">
            <article class="article">
                <h1>Redovisning</h1>

                <h2 id="kmom01" class="reports">kmom01</h2>

                <p>
                    Så jag har inte jobbat kring objektorientering så mycket innan, men inom oopython så jobbade jag såklart runt det. Så jag har ju såklart inte så mycket erfarenhet med det men oopython kursen var ju precis så det jag jobbade med är “fräscht” på minnet.


En klass är som en mall för objekt i php, och ett objekt skapas utifrån en klass, ett objekt har medlemsvariabler och metoder. Ett objekt samlar all sin förmåga i metoder och properties, allt som ska lagras finner man i dess medelmsvaraiabler och allt man kan använda sig av med objektet exponeras via dess metoder.
Innan man kommer igång med sina första klasser måste man veta hur man kan använda sig utav ett objekt utan att använda sig utav klasser t.ex i ett muteable objekt som är ett objekt som kan förändra sin struktur under sin levnadstid. Så innan man börjar kan man t.ex testa skriva ut någon text och ett nummer med två properties och lära sig hur det funkar.


                </p>
                <p>
                    Så var lite osäker på hur koden är strukturerad och används i me/report och är fortfarande det eftersom det är så mycket att lära sig på en gång, men förstår ändå lite och säkert det som jag gjort med Controller.php och twig delarna.
Jag tycker det är skönt att koden är väldigt uppdelad så det är lätt att hitta vad man ska hitta men ändå lite jobbigt eftersom det är så mycket olika ställen att hålla koll på.
Hittills var det ändå rätt simpelt, och folderna förklarande ändå för det mesta, vi hade t.ex assets som hade styles, src, js osv, templates som hade våra twig filer som va våra templates, src/controller som hade våra controller php filer där vi gjorde våra klasser.
Så sidan var ändå ganska lik det vi gjorde i typ webbdesign men nu är det lite mer fokus på backend sakerna.

                </p>

                <p>
                    En av delarna jag fann extra intressant och ändå värdefull var att skriva sakerna i en pattern, det underlättar sen så att det man gör ser likadant ut på olika sidor och så man vet vad som gör vad, som t.ex i våra controller php filer ser koden exakt likadan ut på alla sidor men det enda som ändras är innehållet i våran route function, då kan vi lätt se vad som är vad och vad som gör vad vilket underlättar om man ska göra något liknande som en anna route, eller för att gå igenom ens kod och felsöka. Och jag brukar ändå alltid göra det men har inte tänkt på det för mycket att jag gillar att strukturera koden på ett visst sätt så det ser snyggt ut och är lätt läsbart.

Min TIL för detta momentet var, att jobba i en klass och använda mig utav routes för att visa upp en hemsida och dess templates med den datan jag ville som i javascript och det vi gjorde i databas kursen, men nu istället är det ju i php.

                </p>

                <h2 id="kmom02" class="reports">kmom02</h2>
                <p>
                    Arv är ju när en en klass ärver från en annan klass, man kan ju säga att den nya klassen som ärver från den andra är en utökning av basklassen.
                </p>
                <p>
                    Komposition är när en klass har en annan klass i sig och använder den, i vårt fall har ju DeckOfCards 2 klasser som den använder (Cards, CardGraphic).
                </p>
                <p>
                    Interface är som ett kontrakt där en klass lovar att erbjuda vissa metoder, interface innehåller ingen kod som klasserna kan återanvända utan är bara ett löfte att interfaces metoder ska finnas inuti klassen.
Så vi kan göra en interface, och sedan implementera den i våran klass för att använda den.

                </p>
                <p>
                    
Trait är väldigt likt arv men är gjort annorlunda, en trait är typ som en funktion man har i klassen som är gjort utifrån, så vi kan göra en trait som kanske skriva ut “hej”, och sedan använda vi traiten i klassen och då får våran klass tillgång till det.

                </p>
                <p>
                    Så jag hade kommit lite efter så är helt okej nöjd med uppgiften, allt funkar som det ska men skulle fixa hur allt ser ut på sidan lite bättre, och kanske fixa shuffle, just nu så shufflar jag en kopia av decket, men skulle vilja fixa så jag shufflar självaste decket.
                </p>
                <p>
                    Det gick ändå ganska bra att fixa allt, hade ju dice uppgiften som något man kunde kolla på av hur man gjorde klasserna och hur funktionerna funkade, visste redan att det var DeckOfCards som skulle ärva från dem andra klasserna. 
                </p>
                <p>
                    Jag hade ju redan en sida (session) där jag kollade i JSON om allt funkade, så när jag väll skulle fixa api sidorna så gick det väldigt fort, då kunde jag bara göra routes dit och sen kopiera in koden jag hade där.
                </p>

                <p>
                    Jag började med att jobba på klasserna, så jag gjorde klart cards först sen DeckOfCards och testa om det funkade i sidan session, jag gjorde bara grunderna då så jag kunde få en kortlek, sen gjorde jag sakerna i ordningen som stod på uppgiften, shuffle var ju ganska lätt och fixa, eftersom det var bara att använda sig av shuffle(deck), så det gick väldigt fort medans draw tog mycket längre tid för jag fick alltid felet att jag skicka in en array i $data men det behövde vara en string, men sen gjorde jag så man skrev in ett nummer och så loopade man igenom decket så många gånger och tog fram ett random nummer från 0 till antalet kort, och sedan la jag till det i en array och tog bort kortet från decket, och så loopade det om.
                </p>

                <p>
                    
Det har vart helt okej att jobba i Symfony, det är ganska lätt att se när man får ett fel vad som kan vara felet och vart det ligger, det är väldigt likt det vi gjorde i databas kursen med routes och sånt men detta känns lite mer strukturerat och det är lite enklare att hitta vart allting ligger och hur man delar upp allting.
Det är också hyfsat lätt att jobba array och sånt och få dem att funka i twig, så det var inte så mycket problem att få decksen att funka och t.ex loopa igenom dem.

                </p>

                <p>               
Tror inte jag hade jobbat med klasser i php förut så visste inte riktigt att man kunde göra det, så det var typ det jag lärde mig, och hur dem funkar, skönt ändå att jag har gått oopython kursen innan också så det går ändå fort att lära sig eftersom sakerna man gör som t.ex routes eller klasserna är super likt det man gör i andra kurserna.

                </p>
            </article>
        </main>
    </div>

{% endblock %}